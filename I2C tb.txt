/**
Testing I2C Slave for reading/writing
8 bits of data only
*/

`timescale 1ns / 1ps

module tb_i2c();
reg clk;
reg rst;
/// master io
reg sda_m ;   //master ip
reg scl_m ;  // master ip
reg wen;
reg ren;
reg [6:0] adr_m;
wire ack_m;
//wire flag_m ; // data ready flag by master
wire [7:0] data_rcvd_m ;   //data rcvd by master



//slave io	
reg sda_s ;   // slave ip
reg scl_s ;  // slave ip
wire ack_s ;
wire flag_s ; // data ready flag by slave
wire [7:0] data_rcvd_s ;   //data rcvd by slave
wire [6:0] adr_s;

//call slave
I2C_Slave uutslave( .clk(clk), .rst(rst), .i2c_sda(sda_s), 
.i2c_scl(scl_s), .i2c_ack(ack_s) ,.i2c_data_ready(flag_s ), 
.received_data(data_rcvd_s ), .slave_address(adr_s));

//call master
master uttmaster(.clk(clk), .rst(rst), .data_write(data_rcvd_m ), 
.data_read(data_rcvd_m ), .ackk(ack_m),
.sda(sda_m), .scl(scl_m) , .wen(wen), ren(ren), .adr(adr_m));


 // Clock generation
  always begin
    #5 clk = ~clk;
  end

  // Initial stimulus
  initial begin
    clk = 0;
    rst = 1;
 sda_m = 1;
    scl_m = 1;
    sda_s = 1;
    scl_s = 1;
 
#10 rst = 0;  // rst pulled

// I2C transaction
    #20 sda_m = 0; // Start condition
    #30 scl_m = 0;
    #40 sda_s = 0; // Detect start condition by slave
    #50 scl_s= 0;

//DATA TRANSACTION 
//master sends addr bits with wr bit(sda 0 or 1) and generate an ack
//addr 0101011
 
initial begin
adr_m <= 7'b0101011;
adr_s = adr_m;
if (adr_s == adr_m)
ack_s=1;    /// working ongoing
end
slave rcv that address  and generate an ack signal 
master then sends data to slave with ack bit and stops
slave rcv thah data and generate an ack bit and stops

data 11110001

    // End simulatio
    #1000 $finish;
  end

endmodule

